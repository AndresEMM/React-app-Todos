{"version":3,"sources":["logo.svg","components/Navigation.js","components/TodoForms.js","components/Posts.js","firebase/connect.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navigation","className","href","this","props","t1","tasks","Component","TodoForms","state","id","title","responsible","description","done","priority","handleInput","bind","handleSubmit","e","target","value","name","setState","console","log","preventDefault","todosLenght","onAddTodo","onSubmit","type","onChange","placeholder","required","style","backgroundColor","btnSave","fontSize","Posts","posts","fetch","res","json","db","map","post","key","body","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","fb","handlerAddTodo","removeTodo","ref","child","on","snapshot","val","i","todo","update","index","window","confirm","filter","remove","color","textDecoration","newTodos","todos","styleCompleted","defaultChecked","checkDone","onClick","length","src","logo","alt","onDuplicateTodo","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cb723bbe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\r\n\r\nclass Navigation extends Component {\r\n    render(){\r\n        return (\r\n            <nav className=\"navbar navbar-dark bg-dark\"> \r\n                <a href=\"\" className=\"text-white\">\r\n                    { this.props.t1 }\r\n                    <span className=\"badge badge-pill badge-light ml-2\">{ this.props.tasks }</span>\r\n                </a>\r\n            </nav>\r\n        );\r\n    }\r\n  }\r\n\r\n\r\nexport default Navigation;","import React, {Component} from 'react';\r\n\r\nimport PropTypes from 'prop-types'\r\n\r\nclass TodoForms extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            id: 0,\r\n            title: '',\r\n            responsible: '',\r\n            description: '',\r\n            done: false,\r\n            priority: 'low'\r\n        };\r\n\r\n        this.handleInput = this.handleInput.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleInput(e) {\r\n        const {value, name} = e.target;\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n\r\n        console.log(\"writing:\",e.target.value, e.target.name)\r\n    }\r\n\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n        this.state.id = this.props.todosLenght\r\n        this.props.onAddTodo(this.state.id, this.state);\r\n        console.log(\"Sending the data...\");\r\n        this.state.id = 0\r\n    }\r\n\r\n    render(){\r\n        \r\n        return(\r\n            <div className=\"card\">\r\n                <form className=\"card-body\" onSubmit={this.handleSubmit}>\r\n                    <div className=\"form-group\">\r\n                        <input\r\n                        type=\"text\"\r\n                        name=\"title\"\r\n                        onChange={this.handleInput}\r\n                        className=\"form-control\"\r\n                        placeholder=\"Title\"\r\n                        required\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <input\r\n                        type=\"text\"\r\n                        name=\"responsible\"\r\n                        onChange={this.handleInput}\r\n                        className=\"form-control\"\r\n                        placeholder=\"Responsible\"\r\n                        required\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <input\r\n                        type=\"text\"\r\n                        name=\"description\"\r\n                        onChange={this.handleInput}\r\n                        className=\"form-control\"\r\n                        placeholder=\"Description\"\r\n                        required\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <select\r\n                        name=\"priority\"\r\n                        className=\"form-control\"\r\n                        onChange={this.handleInput}\r\n                        >\r\n                            <option style={{backgroundColor: \"red\"}}>Low</option>\r\n                            <option style={{backgroundColor: \"yellow\"}}>Medium</option>\r\n                            <option style={{backgroundColor: \"green\"}}>High</option>\r\n                        </select>\r\n                    </div>\r\n                    <button type=\"submit\" className=\"btn btn-primary\" style={btnSave}>Save</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nTodoForms.propTypes = {\r\n    onAddTodo: PropTypes.func.isRequired\r\n}\r\n\r\nconst btnSave = {\r\n    fontSize: \"15px\"\r\n}\r\n\r\nexport default TodoForms","import React, { Component } from 'react'\r\n\r\nexport default class Posts extends Component {\r\n\r\n    state = {\r\n        posts: []\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const res = await fetch(\"https://jsonplaceholder.typicode.com/posts\")\r\n        const db = await res.json()\r\n        this.setState({\r\n            posts: db\r\n        })\r\n        console.log(db)\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"col-md-12\">\r\n                <div className=\"card mt-4 mb-4\">\r\n                <h1>Publicaciones</h1>\r\n                <div className=\"row mr-2 ml-2 mb-4\">\r\n                    \r\n                    {\r\n                        this.state.posts.map(post => {\r\n                            return (\r\n                                <div className=\"col-md-4\" key={post.id} >\r\n                                    <div className=\"card mt-4\">\r\n                                        <div className=\"card-header\" >\r\n                                        <h3>{post.title}</h3>\r\n                                        </div>\r\n                                        <div className=\"card-body\">\r\n                                        <p>{post.body}</p>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import * as firebase from 'firebase'\r\nimport 'firebase/firebase'\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyAWMiPRYz8_KEc_fNXZuLgAsAf2GdvleTY\",\r\n    authDomain: \"react-proyects.firebaseapp.com\",\r\n    databaseURL: \"https://react-proyects.firebaseio.com\",\r\n    projectId: \"react-proyects\",\r\n    storageBucket: \"react-proyects.appspot.com\",\r\n    messagingSenderId: \"588061054655\",\r\n    appId: \"1:588061054655:web:86a9048d54aeaabd36d80a\",\r\n    measurementId: \"G-RG9WPS6JLX\"\r\n}\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\nfirebase.analytics();\r\n\r\nexport const db = firebase.database();\r\n//export const db2 = firebase.database();","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Navigation from './components/Navigation.js'\nimport TodoForms from './components/TodoForms.js'\nimport Post from './components/Posts'\nimport {db/*,db2*/} from \"./firebase/connect\"\n\n//console.log(todos);\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      fb: []\n    }\n    this.handlerAddTodo = this.handlerAddTodo.bind(this);\n    this.removeTodo = this.removeTodo.bind(this);\n  }\n  componentDidMount() {\n    const titleRef =  db.ref().child('todos')\n    titleRef.on('value', snapshot => {\n        this.setState({\n            fb: snapshot.val()\n        })\n    })\n  }\n  handlerAddTodo(i, todo) {\n    this.setState({\n      fb: [...this.state.fb, todo]\n    });\n    db.ref().child('todos').child(i).update(todo)\n  }\n  removeTodo(index) {\n    //console.log(index);\n    if(window.confirm(\"¿Estas seguro de que deseas eliminar esta tarea?\")){\n      this.setState({\n        fb: this.state.fb.filter((e, i) => {\n          return i !== index;\n        })\n      });\n      db.ref().child('todos').child(index).remove()\n    }\n  }\n  styleCompleted(id) {\n    return {\n      fontSize: \"20px\",\n      color: this.state.fb[id].done ? \"gray\" : \"black\",\n      textDecoration: this.state.fb[id].done ? \"line-through\" : \"none\"\n    }\n  }\n  checkDone(index) {\n    const newTodos = this.state.fb.map(todo => {\n      if(todo.id === index){\n        todo.done = !todo.done\n      }\n      return todo;\n    });\n    this.setState({todos: newTodos});\n    db.ref().child('todos').child(index).update(newTodos[index])\n  }\n  render(){\n    //console.log(\"Antes de renderizar el componente.\")\n    const todos = this.state.fb.map((todo) => {\n      return(\n        <div className=\"col-md-4\" key={todo.id} style={this.styleCompleted(todo.id)}>\n          <div className=\"card mt-4\">\n            <input type=\"checkbox\"  defaultChecked={todo.done} onChange={this.checkDone.bind(this, todo.id)} />\n            <div className=\"card-header\" >\n              <h3>{todo.title}</h3>\n              <span className=\"badge badge-pill badge-danger ml-2\">\n                {todo.priority}\n              </span>\n            </div>\n            <div className=\"card-body\">\n              <p>{todo.description}</p>\n              <p><mark>{todo.responsible}</mark></p>\n            </div>\n            <div className=\"card-footer\">\n              <button\n              className=\"btn btn-danger\"\n              onClick={this.removeTodo.bind(this, todo.id)}\n              >\n                Delete\n              </button>\n            </div>\n          </div>\n        </div>\n      );\n    })\n    return(\n      <div className=\"App\">\n      <Navigation t1={\"Nav 01\"} tasks={this.state.fb.length} /> \n      <div className=\"container\">\n        <div className=\"row mt-4\">\n          <div className=\"col-md-3\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <TodoForms \n              onDuplicateTodo={this.removeTodo} \n              onAddTodo={this.handlerAddTodo} \n              todosLenght={this.state.fb.length} \n            />\n          </div>\n          <div className=\"col-md-9\">\n            <div className=\"row\">\n            {todos}\n            </div>\n          </div>\n              <Post/>\n        </div>\n      </div>\n      </div>\n    );\n  }\n}\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}